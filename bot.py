import sys
sys.dont_write_bytecode = True

import asyncio
from aiogram import Bot
from datetime import datetime
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import BOT_TOKEN, CHANNEL_ID
from playwright.async_api import async_playwright
import logging
import re
import time

# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.CRITICAL,
    handlers=[
        logging.NullHandler()
    ]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–µ—Ä—ã
for name in logging.root.manager.loggerDict:
    logging.getLogger(name).setLevel(logging.CRITICAL)
    logging.getLogger(name).propagate = False
    logging.getLogger(name).handlers = [logging.NullHandler()]

class FPIParser:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.scheduler = AsyncIOScheduler(timezone=pytz.UTC)
        self.URL = "https://www.dextools.io/app/en/ton/pair-explorer/EQAyrrAjgSuyHrgGO1HimNbGV9tVLndZ3uocLaOyTw_FgegD"
        self.TOTAL_SUPPLY = 1_000_000_000  # 1 –º–∏–ª–ª–∏–∞—Ä–¥
        self.UPDATE_INTERVAL = 1  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.last_rate = None
        self.first_run = True
        self.last_check_time = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.SHOW_PRICE_INDICATORS = True
        self.SHOW_MCAP_INDICATORS = True
        self.DECIMAL_PLACES = 5
        self.last_sent_rate = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        
    async def get_fpi_data(self):
        try:
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                context = await browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/121.0.0.0 Safari/537.36'
                )
                page = await context.new_page()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                await page.goto(self.URL, wait_until='domcontentloaded', timeout=15000)
                
                # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                price_selectors = [
                    'strong._ngcontent-ng-c1534065909',
                    'div.token-price',
                    'div.big-price',
                    'span[class*="ng-tns"][class*="ng-star-inserted"]',
                ]
                
                # Try to get the price
                rate = None
                for selector in price_selectors:
                    try:
                        await page.wait_for_selector(selector, timeout=3000)
                        elements = await page.query_selector_all(selector)
                        
                        for element in elements:
                            text = await element.inner_text()
                            if '$' in text or text.strip().startswith('0.'):
                                try:
                                    # Extract numbers from text
                                    price_text = re.search(r'(\d+\.\d+)', text.replace('$', '').replace(',', ''))
                                    if price_text:
                                        potential_rate = float(price_text.group(1))
                                        if 0.001 < potential_rate < 1:
                                            rate = potential_rate
                                            break
                                except ValueError:
                                    continue
                        
                        if rate:
                            break
                    except Exception:
                        continue
                
                await browser.close()
                
                if rate:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ü–µ–Ω—ã –∏ –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    market_cap = rate * self.TOTAL_SUPPLY
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
                    if market_cap >= 1_000_000_000:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 1 –º–∏–ª–ª–∏–∞—Ä–¥–∞
                        market_cap_formatted = f"${market_cap/1_000_000_000:.2f}B"
                    else:  # –ò–Ω–∞—á–µ –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö
                        market_cap_formatted = f"${market_cap/1_000_000:.2f}M"
                    
                    return {
                        'rate': rate,
                        'market_cap': market_cap_formatted,
                        'mcap_value': market_cap
                    }
                else:
                    return None
                
        except Exception:
            return None

    def truncate_to_decimal_places(self, number, decimal_places):
        """–û–±—Ä–µ–∑–∞–µ—Ç —á–∏—Å–ª–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
        str_value = str(number)
        if '.' in str_value:
            integer_part, decimal_part = str_value.split('.')
            truncated_decimal = decimal_part[:decimal_places]
            return float(f"{integer_part}.{truncated_decimal}")
        return number

    async def send_message(self, data):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ (–Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ) –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            truncated_rate = self.truncate_to_decimal_places(data['rate'], self.DECIMAL_PLACES)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            price_changed = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–∞ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            
            if self.last_sent_rate is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∞–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
                last_truncated = self.truncate_to_decimal_places(self.last_sent_rate, self.DECIMAL_PLACES)
                price_changed = last_truncated != truncated_rate
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞)
            current_time = time.time()
            time_to_send = (current_time - self.last_check_time) >= 60  # –º–∏–Ω—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            if price_changed or time_to_send or self.first_run:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã
                price_indicator = ""
                if self.SHOW_PRICE_INDICATORS:
                    price_indicator = "üü©"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    if not self.first_run and self.last_rate is not None:
                        if data['rate'] > self.last_rate:
                            price_indicator = "üü©"  # –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                        elif data['rate'] < self.last_rate:
                            price_indicator = "üü•"  # –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                mcap_indicator = ""
                if self.SHOW_MCAP_INDICATORS:
                    if self.first_run:
                        mcap_indicator = "üü©"  # –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                    elif self.last_rate is not None:
                        if data['rate'] > self.last_rate:
                            mcap_indicator = "üü©"  # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ç–µ—Ç –≤–º–µ—Å—Ç–µ —Å —Ü–µ–Ω–æ–π
                        elif data['rate'] < self.last_rate:
                            mcap_indicator = "üü•"  # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–¥–∞–µ—Ç –≤–º–µ—Å—Ç–µ —Å —Ü–µ–Ω–æ–π
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è, –∞ —Å –æ–±—Ä–µ–∑–∞–Ω–∏–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤
                rate_str = str(truncated_rate)
                if '.' in rate_str:
                    integer_part, decimal_part = rate_str.split('.')
                    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–æ–≤–Ω–æ 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    if len(decimal_part) < self.DECIMAL_PLACES:
                        decimal_part = decimal_part.ljust(self.DECIMAL_PLACES, '0')
                    else:
                        decimal_part = decimal_part[:self.DECIMAL_PLACES]
                    formatted_rate = f"{integer_part}.{decimal_part}"
                else:
                    formatted_rate = f"{rate_str}.{'0' * self.DECIMAL_PLACES}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                message = (
                    f"{price_indicator}FPIBANK = {formatted_rate}$\n"
                    f"{mcap_indicator}MCap = {data['market_cap']}\n"
                    f"@price_FPIBANK"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(CHANNEL_ID, message)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check_time = current_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                self.last_rate = data['rate']
                self.last_sent_rate = data['rate']  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.first_run = False
        except Exception:
            pass

    async def check_and_send_rate(self):
        current_data = await self.get_fpi_data()
        if current_data:
            await self.send_message(current_data)

    def start(self):
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.last_check_time = time.time()
            
            # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–∞–∑—É
            asyncio.get_event_loop().create_task(self.check_and_send_rate())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            self.scheduler.add_job(self.check_and_send_rate, 'interval', seconds=self.UPDATE_INTERVAL)
            self.scheduler.start()
            asyncio.get_event_loop().run_forever()
        except Exception:
            pass

if __name__ == "__main__":
    parser = FPIParser()
    try:
        parser.start()
    except KeyboardInterrupt:
        pass
    except Exception:
        pass